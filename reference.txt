http://bost.ocks.org/mike/map/  --Letâ€™s Make a Map--
http://bl.ocks.org/mbostock/4060606
https://github.com/mbostock/d3/wiki/API-Reference
https://developer.mozilla.org/en-US/
http://datamaps.github.io/
http://data.runkeeper.com/rk-usa-running-stats-by-state
http://datamaps.markmarkoh.com/creating-a-datamaps-plugin/

http://localhost:8080/haiti/
http://haitidata.org/developer/

departments:
  http://haitidata.org/layers/cnigs.spatialdata:hti_boundaries_departements_adm1_cnigs_polygon

communes:
  http://haitidata.org/layers/cnigs.spatialdata:hti_boundaries_communes_adm2_cnigs_polygon


TopoJSON: https://github.com/mbostock/topojson/wiki/Command-Line-Reference


convert geojson to topojson:
  departments:
    topojson -o departments-topo.json --id-property id_dep --properties name=departemen departments.json
  departments with simplification:
    topojson -o departments-topo05.json --id-property id_dep --properties name=departemen,code --simplify-proportion .05 departments.json
  communes with simplification:
    topojson -o communes-topo05.json --id-property id_com --properties name=commune,id_dep,departemen,code --simplify-proportion .05 communes.json
  departments and communes in one file with simplification:
    topojson -o full-topo05.json --properties id_com,commune,id_dep,departemen,code --simplify-proportion .05 communes.json departments.json
  combine:
    topojson -o full-topo05.json -p communes-topo05.json departments-topo05.json
  more examples:
    topojson -o kenya-counties-topo05.json --id-property ID --properties name=NAME --simplify-proportion .05 kenya_states.geojson
    topojson -o usa-states-topo05.json --properties name=name --simplify-proportion .5 usa-states.json
    topojson -o afghanistan-provinces-topo.json --id-property ID --properties name=NAME --simplify-proportion .05 afghanistan.geojson
    topojson -o canada-provinces-topo.json --id-property ID --properties name=NAME --simplify-proportion .05 canada.geojson

http://ben.balter.com/2013/06/26/how-to-convert-shapefiles-to-geojson-for-use-on-github/
  ogr2ogr -f GeoJSON -t_srs crs:84 [name].geojson [name].shp

http://www.naturalearthdata.com/
https://osm.wno-edv-service.de/boundaries/
http://www.mapshaper.org/

TO ADD COUNTRY SUPPORT:
1. get boundary files from https://osm.wno-edv-service.de/boundaries/
2. open in QGIS and if needed, trim using natural earth 10m boundary files
    QGIS to trim shapefiles:
      vector->geoprocessing tools->intersect/difference
      input layer: cookie dough
      intersect layer: cookie cutter
    may result in each shape having its own feature in geojson is this is the case:
      QGIS->vector->geoprocessing tools->dissolve
        dissolve field: ID
  save layer as geojson
3. or convert to geojson using command line:
    ogr2ogr -f GeoJSON -t_srs crs:84 [name].geojson [name].shp
    ogr2ogr -f GeoJSON -t_srs crs:84 canada.geojson Canada_AL4.shp
4. convert to topojson using command line:
    `maps$ ./convertShape [scope] [division]`
    example: `maps$ ./convertShape canada provinces`    
5. run `node process.js` to create key.json file, country.yaml file, and properly name country.topo object property
6. copy center point from console to app.js var projections['country']


jekyll reference:
  http://jekyllrb.com/docs/datafiles/
  https://github.com/Shopify/liquid/wiki/Liquid-for-Designers
  https://github.com/Animosity/CraftIRC/wiki/Complete-idiot's-introduction-to-yaml

foundation reference:
  http://foundation.zurb.com/sites/docs/
